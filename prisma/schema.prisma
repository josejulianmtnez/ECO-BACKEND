// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id            Int      @id @default(autoincrement())
  name          String
  email         String?   @unique
  role          String
  password_hash String?
  created_at    DateTime @default(now())

  devices       devices[]

  generated_codes link_codes[] @relation("TutorLinkCode")
  used_codes      link_codes[] @relation("ChildLinkCode")

  tutor_alerts  alerts[] @relation("tutor_alerts")
  child_alerts  alerts[] @relation("child_alerts")

  tutor_links   tutor_child_links[] @relation("TutorToChild")
  child_links   tutor_child_links[] @relation("ChildToTutor")

  tutor_rules   rules[] @relation("RulesFromTutor")
  child_rules   rules[] @relation("RulesForChild")

  child_activities  activities[] @relation("ChildActivities")
}

model devices {
  id            Int      @id @default(autoincrement())
  uuid           String   @unique
  name          String
  model         String
  os_version    String
  last_sync     DateTime?
  created_at    DateTime @default(now())

  user_id       Int
  user          users    @relation(fields: [user_id], references: [id])
}

model alerts {
  id            Int       @id @default(autoincrement())
  
  id_user_tutor Int
  tutor         users     @relation("tutor_alerts", fields:[id_user_tutor], references:[id])
  id_user_child Int
  child         users     @relation("child_alerts", fields:[id_user_child], references:[id])

  timestamp     DateTime  @default(now())
  type          String
  message       String
  status        Boolean   @default(true)
}

model link_codes {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  tutor_id    Int
  used        Boolean  @default(false)
  expires_at  DateTime
  created_at  DateTime @default(now())

  tutor     users    @relation("TutorLinkCode", fields: [tutor_id], references: [id])

  child_id  Int?
  child     users?   @relation("ChildLinkCode", fields: [child_id], references: [id])
}


model tutor_child_links {
  id         Int      @id @default(autoincrement())
  tutor_id   Int
  child_id   Int
  created_at DateTime @default(now())

  tutor users @relation("TutorToChild", fields: [tutor_id], references: [id])
  child users @relation("ChildToTutor", fields: [child_id], references: [id])
}

model rules {
  id                  Int      @id @default(autoincrement())
  tutor_id            Int
  child_id            Int
  blocked_app         String
  screen_time_limit   Int
  active    Boolean   @default(false)
  created_at DateTime @default(now())

  tutor users @relation("RulesFromTutor", fields: [tutor_id], references: [id])
  child users @relation("RulesForChild", fields: [child_id], references: [id])
}

model activities {
  id                  Int      @id @default(autoincrement())
  child_id            Int
  uuid                String   @unique
  app_name            String
  start_time          DateTime?
  close_time          DateTime?
  duration            Int?
  created_at          DateTime @default(now())

  child users @relation("ChildActivities", fields: [child_id], references: [id])
}
